// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // // instruction A or C
    DMux(in=true, sel=instruction[15], a=instA, b=instC);

    // load bits
    And(a=instC, b=instruction[3], out=writeM);
    And(a=instC, b=instruction[4], out=writeD);
    Or(a=instA, b=instruction[5], out=writeA);

    // using inM or not
    And(a=instC, b=instruction[12], out=selM);
    
    // configure y for ALU 
    Mux16(a=outALU, b=instruction, sel=instA, out=outMUX1);
    ARegister(in=outMUX1, load=writeA, out[0..14]=addressM, out=A);
    Mux16(a=A, b=inM, sel=selM, out=outMUX2);

    // configure x for ALU 
    DRegister(in=outALU, load=writeD, out=D);

    // configure outM
    ALU(x=D, y=outMUX2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);
    
    // check j1j2j3
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notng, b=notzr, out=ps);
    And(a=instruction[0], b=ps, out=checkps);
    And(a=instruction[1], b=zr, out=checkzr);
    And(a=instruction[2], b=ng, out=checkng);
    
    // configure load
    And(a=instC, b=check, out=load);
    Or8Way(in[0]=checkzr, in[1]=checkng, in[2]=checkps, out=check);

    PC(in=A, load=load, inc=true, reset=reset, out[0..14]=pc);
}