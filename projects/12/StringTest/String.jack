// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int maxLen, len; 
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(Math.max(1, maxLength));
        let len = 0; let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(len = maxLen) { return this; }
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = Math.max(0, len - 1);
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean sign;
        var int i, int_val;
        let i = 0; let int_val = 0;
        if(str[0] = 45) {
            let sign = (str[0] = 45);
            let i = 1;
        }
        while((i < len) & (str[i] > 47 & str[i] < 58)) {
            let int_val = (int_val*10) + (str[i]-48);
            let i = i + 1;
        }

        if(sign) {
            let int_val = -int_val;
        }
        return int_val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if(val < 0) {
            let val = - val;
            do appendChar(45);
        }

        do setIntRec(val);
        return;
    }

    // Sets this string to hold a representation of the given value with recursion, note val > 0. 
    method void setIntRec(int val) {
        if(val < 10) {
            do appendChar(val + 48);
            return;
        }
        do setIntRec(val/10);
        do setIntRec(val - ((val/10)*10));
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
