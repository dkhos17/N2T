function Board.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 1
push argument 1
pop this 2
push constant 32
pop this 3
push constant 32
pop this 4
push pointer 0
call Board.draw 1
pop temp 0
push pointer 0
call Board.drawBorders 1
pop temp 0
push pointer 0
push argument 2
push argument 3
call Board.setWall 3
pop temp 0
push pointer 0
return
function Board.draw 3
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
not
pop local 2
label WHILE_EXP0
push local 0
push constant 8
push this 3
call Math.multiply 2
lt
push local 1
push constant 8
push this 4
call Math.multiply 2
lt
and
not
if-goto WHILE_END0
push constant 0
push this 0
call List.new 2
pop this 0
push pointer 0
push local 2
call Board.flipColor 2
pop local 2
push this 1
push local 0
add
push this 2
push local 1
add
push this 1
push local 0
add
push this 3
add
push constant 511
call Math.min 2
push this 2
push local 1
add
push this 4
add
push constant 255
call Math.min 2
call Screen.drawRectangle 4
pop temp 0
push local 1
push this 4
add
pop local 1
push local 1
push constant 8
push this 4
call Math.multiply 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 3
add
pop local 0
push constant 0
pop local 1
push pointer 0
push local 2
call Board.flipColor 2
pop local 2
label IF_FALSE0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Board.isWin 3
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push constant 8
lt
push local 1
push constant 8
lt
and
not
if-goto WHILE_END0
push this 0
push constant 8
push local 0
call Math.multiply 2
push local 1
add
call List.get 2
pop local 2
push local 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
push local 1
push constant 8
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
add
pop local 0
push constant 0
pop local 1
label IF_FALSE1
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Board.isLose 1
push argument 0
pop pointer 0
push argument 1
push constant 2
add
push constant 8
lt
push argument 2
push constant 1
add
push constant 8
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push constant 8
push argument 1
push constant 2
add
call Math.multiply 2
push argument 2
add
push constant 1
add
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
label IF_FALSE0
push argument 1
push constant 2
add
push constant 8
lt
push argument 2
push constant 0
gt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
push constant 8
push argument 1
push constant 2
add
call Math.multiply 2
push argument 2
add
push constant 1
sub
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
return
label IF_FALSE3
label IF_FALSE2
push argument 1
push constant 2
sub
push constant 0
gt
push argument 2
push constant 1
add
push constant 8
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 0
push constant 8
push argument 1
push constant 2
sub
call Math.multiply 2
push argument 2
add
push constant 1
add
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
label IF_FALSE4
push argument 1
push constant 2
sub
push constant 0
gt
push argument 2
push constant 0
gt
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 0
push constant 8
push argument 1
push constant 2
sub
call Math.multiply 2
push argument 2
add
push constant 1
sub
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
return
label IF_FALSE7
label IF_FALSE6
push argument 2
push constant 2
add
push constant 8
lt
push argument 1
push constant 1
add
push constant 8
lt
and
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 0
push constant 8
push argument 1
push constant 1
add
call Math.multiply 2
push argument 2
add
push constant 2
add
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 0
return
label IF_FALSE9
label IF_FALSE8
push argument 2
push constant 2
add
push constant 8
lt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push this 0
push constant 8
push argument 1
push constant 1
sub
call Math.multiply 2
push argument 2
add
push constant 2
add
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 0
return
label IF_FALSE11
label IF_FALSE10
push argument 2
push constant 2
sub
push constant 0
gt
push argument 1
push constant 1
add
push constant 8
lt
and
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push this 0
push constant 8
push argument 1
push constant 1
add
call Math.multiply 2
push argument 2
add
push constant 2
sub
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push constant 0
return
label IF_FALSE13
label IF_FALSE12
push argument 2
push constant 2
sub
push constant 0
gt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push this 0
push constant 8
push argument 1
push constant 1
sub
call Math.multiply 2
push argument 2
add
push constant 2
sub
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push constant 0
return
label IF_FALSE15
label IF_FALSE14
push constant 0
not
return
function Board.flipColor 0
push argument 0
pop pointer 0
push argument 1
call Screen.setColor 1
pop temp 0
push argument 1
push constant 0
not
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
not
return
function Board.drawBorders 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push constant 1
sub
push this 2
push this 1
push constant 1
add
push constant 255
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Board.setWall 1
push argument 0
pop pointer 0
push constant 8
push argument 1
call Math.multiply 2
push argument 2
add
pop local 0
push this 0
push local 0
push constant 1
call List.set 3
pop temp 0
push pointer 0
push argument 1
push argument 2
call Board.makeWall 3
pop temp 0
push constant 0
return
function Board.isWall 2
push argument 0
pop pointer 0
push constant 8
push argument 1
call Math.multiply 2
push argument 2
add
pop local 1
push this 0
push local 1
call List.get 2
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
push argument 1
push argument 2
call Board.makeWall 3
pop temp 0
push constant 0
not
return
function Board.makeWall 0
push argument 0
pop pointer 0
push pointer 0
push this 1
push constant 16
call Math.divide 2
push constant 2
push argument 1
call Math.multiply 2
add
push constant 32
push this 2
push constant 32
push argument 2
call Math.multiply 2
add
call Math.multiply 2
add
call Board.drawWall 2
pop temp 0
push pointer 0
push this 1
push constant 16
call Math.divide 2
push constant 2
push argument 1
call Math.multiply 2
add
push constant 32
push this 2
push constant 32
push argument 2
call Math.multiply 2
add
call Math.multiply 2
add
push constant 1
add
call Board.drawWall 2
pop temp 0
push pointer 0
push this 1
push constant 16
call Math.divide 2
push constant 2
push argument 1
call Math.multiply 2
add
push constant 32
push this 2
push constant 32
push argument 2
call Math.multiply 2
add
call Math.multiply 2
add
push constant 512
add
call Board.drawWall 2
pop temp 0
push pointer 0
push this 1
push constant 16
call Math.divide 2
push constant 2
push argument 1
call Math.multiply 2
add
push constant 32
push this 2
push constant 32
push argument 2
call Math.multiply 2
add
call Math.multiply 2
add
push constant 513
add
call Board.drawWall 2
pop temp 0
push constant 0
return
function Board.drawWall 1
push argument 0
pop pointer 0
push constant 16384
push argument 1
add
pop local 0
push local 0
push constant 0
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 32
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 64
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 96
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 128
add
push constant 4228
call Memory.poke 2
pop temp 0
push local 0
push constant 160
add
push constant 4228
call Memory.poke 2
pop temp 0
push local 0
push constant 192
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 224
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 256
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 288
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 320
add
push constant 4228
call Memory.poke 2
pop temp 0
push local 0
push constant 352
add
push constant 4228
call Memory.poke 2
pop temp 0
push local 0
push constant 384
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 416
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 448
add
push constant 31711
neg
call Memory.poke 2
pop temp 0
push local 0
push constant 480
add
push constant 1
neg
call Memory.poke 2
pop temp 0
push constant 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
